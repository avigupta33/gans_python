The Matrix class will store all of it's important data in it's own internal struct

C fields:
  long rows;
  long cols;
  Py_ssize_t len;
  double *data;

Python-readable fields:
  MatrixObject *tranpose (still in the works, will involve cyclic GC)
  PyLongObject *Py_rows (as 'rows')
  PyLongObject *Py_cols (as 'cols')
  PyTupleObject *Py_data (as 'data')
  PyUnicodeObject *Py_repr (as '__repr__')

On new:
  alloc struct memory, initialize everything to NULL or 0
  
On init: (can be invoked many times)
  read parameters
  DECREF all Py_* fields if the exist
  set internal C fields

When a Py_* field is requested:
  If the field is empty, build the PyObject and put it in the associated field
  return the field

Pseudocode for getting a transposed matrix
PyObject* MatrixGet_transpose(self):
    if self doesn't have a transpose:
        t = Matrix_new()
        t.rows, t.cols = self.cols, self.rows
        t.pyrows, t.pycols = self.pycols, self.pyrows # these are always shared between self and its transpose
        t.len = self.len
        if self is a vector:
            t.data = self.data
        else:
            T* t_data = malloc of same size as self.data
            check for malloc fail
            transpose algorithm here
        INCREF t
        self.transpose = t
    return self.transpose
    
    
    
    

